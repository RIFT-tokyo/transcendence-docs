asyncapi: 2.0.0

info:
  title: Transcendence Websockets API
  version: '1.0.0'

servers:
  bootstrap:
    url: localhost:4214
    protocol: wss
    description: |
      Public server available without authorization.
      Once the socket is open you can subscribe to a public channel by sending a subscribe request message.

channels:
  /:
    publish:
      description: Send messages to the API
      message:
        oneOf:
          - $ref: '#/components/messages/ping'

    subscribe:
      description: Messages that you receive from the API
      message:
        oneOf:
          - $ref: '#/components/messages/pong'
          - $ref: '#/components/messages/userStatus'

components:
  messages:
    ping:
      summary: Ping server to determine whether connection is alive
      description: Client can ping server to determine whether connection is alive, server responds with pong. This is an application level ping as opposed to default ping in websockets standard which is server initiated
      payload:
        $ref: '#/components/schemas/ping'
      x-response:
        $ref: '#/components/messages/pong'
    pong:
      summary: Pong is a response to ping message
      description: Server pong response to a ping to determine whether connection is alive. This is an application level pong as opposed to default pong in websockets standard which is sent by client in response to a ping
      payload:
        $ref: '#/components/schemas/pong'
    userStatus:
      description: Status sent on connection or system status changes.
      payload:
        $ref: '#/components/schemas/userStatus'
      examples:
        - payload:
            event: userStatus
            status: online

  schemas:
    ping:
      type: object
      properties:
        event:
          type: string
          const: ping
        username:
          $ref: '#/components/schemas/username'
      required:
        - event
    pong:
      type: object
      properties:
        event:
          type: string
          const: pong
        username:
          $ref: '#/components/schemas/username'
    userStatus:
      type: object
      properties:
        event:
          type: string
          const: userStatus
        status:
          $ref: '#/components/schemas/status'
        username:
          $ref: '#/components/schemas/username'
    status:
      type: string
      enum:
        - online
        - offline
        - game
    username:
      type: string
      description: client unique username.
    token:
      type: string
      description: authentication token for private-data endpoints.