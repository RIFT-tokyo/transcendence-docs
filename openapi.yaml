openapi: 3.0.0
info:
  title: transcendence API
  version: '1.0'
  description: The transendence API enables programmatic access to transcendence.
servers:
  - url: 'http://localhost:4211/api'
    description: Local
paths:
  /auth/login:
    get:
      summary: Oauth login request
      tags:
        - auth
      operationId: get-auth-login
      parameters: []
      responses:
        '307':
          description: Temporary Redirect
          headers:
            Location:
              schema:
                type: string
              description: redirect to 42's confirm browser
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      description: |-
        The first client request by 42 for oauth2.0.
        After this, you will be redirected to 42's confirm browser.
      security: []
    parameters: []
    post:
      summary: username and password login
      operationId: post-auth-login
      responses:
        '307':
          description: Temporary Redirect
          headers:
            Location:
              schema:
                type: string
              description: to the home
            Set-Cookie:
              schema:
                type: string
                example: SessionID=CA978112CA1BBDCAFAC231B39A23DC4DA; Path=/; Secure; HttpOnly
              description: set sessionId
        '400':
          $ref: '#/components/responses/400-Bad-Request'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      description: username and password auth without using auth.
      parameters: []
      security: []
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/Login'
  /auth/signup:
    post:
      summary: Create new user
      operationId: post-users
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          $ref: '#/components/responses/400-Bad-Request'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      requestBody:
        $ref: '#/components/requestBodies/Login'
      parameters: []
      tags:
        - auth
      security: []
  /auth/callback:
    get:
      summary: Oauth callback
      tags:
        - auth
      responses:
        '307':
          description: Temporary Redirect
          headers:
            Location:
              schema:
                type: string
              description: to the home
            Set-Cookie:
              schema:
                type: string
                example: SessionID=CA978112CA1BBDCAFAC231B39A23DC4DA; Path=/; Secure; HttpOnly
              description: set sessionId
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      operationId: get-auth-callback
      description: |-
        After allowing transcendence on screen 42, you will be redirected here.
        This is where the server-side will register or retrieve the user's information.
      security: []
  /me:
    parameters: []
    get:
      summary: Get the authenticated user
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          $ref: '#/components/responses/400-Bad-Request'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      operationId: get-me
      description: Retrieve the information of the user with the matching user ID.
      tags:
        - user
      parameters: []
  /users:
    get:
      summary: List users
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/UserList'
        '400':
          $ref: '#/components/responses/400-Bad-Request'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      operationId: get-users
      description: ''
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
  '/users/by/{username}':
    parameters:
      - $ref: '#/components/parameters/username'
    get:
      summary: Get a user by username
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      operationId: get-users-username
      description: ''
      parameters: []
  '/users/{userID}':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get a user
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      tags:
        - user
      parameters: []
    delete:
      summary: Delete a user
      operationId: delete-users-userId
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/400-Bad-Request'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      tags:
        - user
      parameters: []
    put:
      summary: Update a user
      operationId: put-users-userId
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          $ref: '#/components/responses/400-Bad-Request'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      tags:
        - user
      requestBody:
        $ref: '#/components/requestBodies/User'
  '/users/{userID}/images':
    parameters:
      - $ref: '#/components/parameters/userId'
    post:
      summary: Upload a user profile image
      operationId: post-users-userID-images
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '413':
          $ref: '#/components/responses/413-Payload-Too-Large'
        '415':
          $ref: '#/components/responses/415-Unsupported-Media-Type'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      description: ''
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      tags:
        - user
    delete:
      summary: Delete a user profile image
      operationId: delete-users-userID-images
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      description: ''
      tags:
        - user
  '/users/{userID}/followers':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: List Followers of a user
      responses:
        '200':
          $ref: '#/components/responses/UserList'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      operationId: get-users-userId-friends
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - follow
      description: Lists the people following the specified user.
  '/users/{userID}/following':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: List the people a user follows
      tags:
        - follow
      responses:
        '200':
          $ref: '#/components/responses/UserList'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      operationId: get-users-userID-following
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      description: Lists the people who the specified user follows.
  '/users/following/{userID}':
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      summary: Follow a user
      operationId: put-users-following-userID
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      tags:
        - follow
      description: ''
    delete:
      summary: Unfollow a user
      operationId: delete-users-following-userID
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      tags:
        - follow
  '/users/{userID}/following/{targetUserID}':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/targetUserID'
    get:
      summary: Check if a user follows another user
      tags:
        - follow
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-Not-Found'
        '500':
          $ref: '#/components/responses/500-Internal-Server-Error'
      operationId: get-users-userID-following-targetUserID
components:
  schemas:
    User:
      title: User
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          minimum: 1
        username:
          type: string
          minLength: 1
        display_name:
          type: string
        profile_image:
          type: string
          format: uri
        status:
          type: string
          enum:
            - online
            - offline
            - game
        status_message:
          type: string
        followers:
          type: integer
          minimum: 0
        following:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Login:
      title: Login
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    Error:
      title: Error
      type: object
      properties:
        status_code:
          type: integer
        message:
          type: string
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            example:
              value:
                display_name: Ironman
                status_message: I love you 3000.
    Login:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
            required:
              - username
              - password
          examples:
            example:
              value:
                username: tstark
                password: password
  responses:
    User:
      description: User response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            example:
              value:
                id: 512
                username: tstark
                display_name: Tony Stark
                profile_image: 'http://cdn.transcendence.com/profile/tstark.jpg'
                status: online
                status_message: I am Ironman.
                followers: 3000
                following: 85
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
    UserList:
      description: User list response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
          examples:
            example:
              value:
                - id: 512
                  username: tstark
                  display_name: Tony Stark
                  profile_image: 'http://cdn.transcendence.com/profile/tstark.jpg'
                  status: online
                  status_message: I am Ironman.
                  followers: 3000
                  following: 85
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
                - id: 412
                  username: pparker
                  display_name: Peter Parker
                  profile_image: 'http://cdn.transcendence.com/profile/pparker.jpg'
                  status: online
                  status_message: Great power comes with great responsibility
                  followers: 625
                  following: 42
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
                - id: 381
                  username: srogers
                  display_name: Steve Rogers
                  profile_image: 'http://cdn.transcendence.com/profile/srogers.jpg'
                  status: online
                  status_message: The Sentinel of Liberty
                  followers: 1918
                  following: 1
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
    400-Bad-Request:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example:
              value:
                status_code: 400
                message: Bad Request
    401-Unauthorized:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example:
              value:
                status_code: 401
                message: Unauthorized
    404-Not-Found:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            '404':
              value:
                status_code: 404
                message: Not Found
    409-Conflict:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example:
              value:
                status_code: 409
                message: Conflict
    413-Payload-Too-Large:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example:
              value:
                status_code: 413
                message: Payload Too Large
    415-Unsupported-Media-Type:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example:
              value:
                status_code: 415
                message: Unsupported Media Type
    500-Internal-Server-Error:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example:
              value:
                status_code: 500
                message: Internal Server Error
  parameters:
    userId:
      name: userID
      in: path
      required: true
      schema:
        type: integer
    username:
      name: username
      in: path
      schema:
        type: string
      description: Username
      required: true
    limit:
      name: limit
      in: query
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 80
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
    targetUserID:
      name: targetUserID
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
  examples: {}
  securitySchemes:
    sessionAuth:
      name: sessionId
      type: apiKey
      in: cookie
      description: sessionId needed in cookie
security:
  - sessionAuth: []
