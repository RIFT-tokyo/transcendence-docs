openapi: 3.0.0
info:
  title: transcendence API
  version: '1.0'
  description: The transendence API enables programmatic access to transcendence.
servers:
  - url: 'http://localhost:4211'
    description: Local
paths:
  /users:
    get:
      summary: List users
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    - id: 1
                      username: inu
                      display_name: 犬
                      profile_image: 'http://example.com'
                      status: online
                      status_message: I'm dog
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
                    - id: 2
                      username: saru
                      display_name: 猿
                      profile_image: 'http://example.com'
                      status: offline
                      status_message: I'm monkey
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
                    - id: 3
                      username: kiji
                      display_name: 雉
                      profile_image: 'http://example.com'
                      status: game
                      status_message: I'm pheasant
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users
      description: ''
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
    post:
      summary: Create new user
      operationId: post-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    id: 1
                    username: taro
                    display_name: 太郎
                    profile_image: 'http://example.com'
                    status: online
                    status_message: ほげほげ
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SessionID=CA978112CA1BBDCAFAC231B39A23DC4DA; Path=/; Secure; HttpOnly
              description: set sessionId
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    status_code: 409
                    message: username is already used
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUser'
            examples:
              example:
                value:
                  username: inu
                  display_name: 犬
                  status_message: bow-wow!
      tags:
        - user
      parameters: []
  /me:
    parameters: []
    get:
      summary: Get the authenticated user
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    id: 1
                    username: taro
                    display_name: 太郎
                    profile_image: 'http://example.com'
                    status: online
                    status_message: ほげほげ
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-me
      description: Retrieve the information of the user with the matching user ID.
      tags:
        - user
      parameters: []
  '/users/by/{username}':
    parameters:
      - $ref: '#/components/parameters/username'
    get:
      summary: Get a user by username
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    id: 1
                    username: taro
                    display_name: 太郎
                    profile_image: 'http://example.com'
                    status: online
                    status_message: ほげほげ
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-username
      description: ''
      parameters: []
  '/users/{userID}':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get a user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    id: 1
                    username: taro
                    display_name: 太郎
                    profile_image: 'http://example.com'
                    status: online
                    status_message: ほげほげ
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      tags:
        - user
      parameters: []
    delete:
      summary: Delete a user
      operationId: delete-users-userId
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - user
      parameters: []
    put:
      summary: Update a user
      operationId: put-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    id: 1
                    username: taro
                    display_name: 太郎
                    profile_image: 'http://example.com'
                    status: online
                    status_message: ほげほげ
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUser'
            examples:
              example:
                value:
                  username: inu
                  display_name: 犬
                  status_message: bow-wow!
  '/auth/login':
    get:
      summary: Your GET endpoint
      tags:
        - auth
      operationId: get-auth-login
      parameters:
        - $ref: '#/components/parameters/provider'
      responses:
        '307':
          description: Temporary Redirect
          headers:
            Location:
              schema:
                type: string
              description: browser confirm of 42
      description: |-
        The first client request by 42 for oauth2.0.
        After this, you will be redirected to 42's confirm browser.
      security: []
    parameters: []
    post:
      summary: ''
      operationId: post-auth-login
      responses:
        '307':
          description: Temporary Redirect
          headers:
            Location:
              schema:
                type: string
              description: to the home
            Set-Cookie:
              schema:
                type: string
                example: SessionID=CA978112CA1BBDCAFAC231B39A23DC4DA; Path=/; Secure; HttpOnly
              description: set sessionId
      description: username and password auth without using auth.
      parameters: []
      security: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
              required:
                - username
                - password
              x-examples:
                example-1:
                  username: syudai
                  password: magiimine
            examples:
              example-1:
                value:
                  username: syudai
                  password: password
  '/auth/callback':
    get:
      summary: Your GET endpoint
      tags:
        - auth
      responses:
        '307':
          description: Temporary Redirect
          headers:
            Location:
              schema:
                type: string
              description: to the home
            Set-Cookie:
              schema:
                type: string
                example: SessionID=CA978112CA1BBDCAFAC231B39A23DC4DA; Path=/; Secure; HttpOnly
              description: set sessionId
      operationId: get-auth-callback
      description: |-
        After allowing transcendence on screen 42, you will be redirected here.
        This is where the server-side will register or retrieve the user's information.
      security: []
  '/users/{userID}/followers':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: List Followers of a user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    - id: 2
                      username: inu
                      display_name: 犬
                      profile_image: 'http://example.com'
                      status: online
                      status_message: I'm dog
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
                    - id: 3
                      username: saru
                      display_name: 猿
                      profile_image: 'http://example.com'
                      status: offline
                      status_message: I'm monkey
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
                    - id: 4
                      username: kiji
                      display_name: 雉
                      profile_image: 'http://example.com'
                      status: game
                      status_message: I'm pheasant
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-userId-friends
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - follow
      description: Lists the people following the specified user.
  '/users/{userID}/following':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: List the people a user follows
      tags:
        - follow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    - id: 1
                      username: inu
                      display_name: 犬
                      status: online
                      status_message: わん
                      followers: 1
                      following: 3
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
                    - id: 2
                      username: saru
                      display_name: 猿
                      status: offline
                      status_message: うきー
                      followers: 2
                      following: 1
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
                    - id: 3
                      username: kiji
                      display_name: きじ
                      status: game
                      status_message: きー
                      followers: 2
                      following: 10
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-userID-following
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      description: Lists the people who the specified user follows.
  '/users/following/{userID}':
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      summary: Follow a user
      operationId: put-users-following-userID
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - follow
    delete:
      summary: Unfollow a user
      operationId: delete-users-following-userID
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - follow
  '/users/{userID}/following/{targetUserID}':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/targetUserID'
    get:
      summary: Check if a user follows another user
      tags:
        - follow
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-userID-following-targetUserID
components:
  schemas:
    RequestUser:
      title: RequestUser
      type: object
      x-examples:
        example:
          username: bunjiro
          display_name: 文次郎
          status_message: Don't Panic!
      properties:
        username:
          type: string
          minLength: 1
        display_name:
          type: string
        profile_image:
          type: string
        status_message:
          type: string
    ResponseUser:
      title: ResponseUser
      type: object
      x-examples:
        example:
          id: 42
          username: nop
          display_name: のっぷ
          profile_image: 'localost:4211/users/nop/profile.jpg'
          status: online
          status_message: May the force be with you.
          created_at: '2021-01-01T12:42:42Z'
          updated_at: '2042-01-01T12:42:42Z'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          minimum: 1
        username:
          type: string
          minLength: 1
        display_name:
          type: string
        profile_image:
          type: string
          format: uri
        status:
          type: string
          enum:
            - online
            - offline
            - game
        status_message:
          type: string
        followers:
          type: integer
          minimum: 0
        following:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - username
        - display_name
        - profile_image
        - status
        - status_message
        - followers
        - following
        - created_at
        - updated_at
    Error:
      title: Error
      type: object
      properties:
        status_code:
          type: integer
        mesasge:
          type: string
  requestBodies: {}
  responses: {}
  parameters:
    userId:
      name: userID
      in: path
      required: true
      schema:
        type: integer
    username:
      name: username
      in: path
      schema:
        type: string
      description: Username
      required: true
    limit:
      name: limit
      in: query
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 80
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
    provider:
      name: provider
      in: query
      required: true
      schema:
        type: string
    targetUserID:
      name: targetUserID
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
  examples: {}
  securitySchemes:
    sessionAuth:
      name: sessionId
      type: apiKey
      in: cookie
      description: sessionId needed in cookie
security:
  - sessionAuth: []
