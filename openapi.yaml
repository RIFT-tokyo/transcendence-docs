openapi: 3.0.0
info:
  title: openapi
  version: '1.0'
servers:
  - url: 'http://localhost:4211'
paths:
  /users:
    get:
      summary: Get all users
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    - id: 1
                      username: inu
                      display_name: 犬
                      profile_image: 'http://example.com'
                      status: online
                      status_message: I'm dog
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
                    - id: 2
                      username: saru
                      display_name: 猿
                      profile_image: 'http://example.com'
                      status: offline
                      status_message: I'm monkey
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
                    - id: 3
                      username: kiji
                      display_name: 雉
                      profile_image: 'http://example.com'
                      status: game
                      status_message: I'm pheasant
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      operationId: get-users
      description: ''
    post:
      summary: Create new user
      operationId: post-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    id: 1
                    username: taro
                    display_name: 太郎
                    profile_image: 'http://example.com'
                    status: online
                    status_message: ほげほげ
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUser'
            examples:
              example:
                value:
                  name: postuser
      tags:
        - user
  /me:
    parameters: []
    get:
      summary: Get User Info by User ID
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    id: 1
                    username: taro
                    display_name: 太郎
                    profile_image: 'http://example.com'
                    status: online
                    status_message: ほげほげ
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      operationId: get-me
      description: Retrieve the information of the user with the matching user ID.
      tags:
        - user
  '/users/by/{username}':
    parameters:
      - name: username
        in: path
        schema:
          type: string
        description: Username
    get:
      summary: Get User Info by username
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    id: 1
                    username: taro
                    display_name: 太郎
                    profile_image: 'http://example.com'
                    status: online
                    status_message: ほげほげ
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      operationId: get-users-username
      description: ''
  '/users/{userID}':
    parameters:
      - schema:
          type: string
        name: userID
        in: path
        required: true
    get:
      summary: Get User Info by User ID
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    id: 1
                    username: taro
                    display_name: 太郎
                    profile_image: 'http://example.com'
                    status: online
                    status_message: ほげほげ
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
        '404':
          description: User Not Found
        '500':
          description: Internal Server Error
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      tags:
        - user
    delete:
      summary: Delete User
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      tags:
        - user
    put:
      summary: Update User Information
      operationId: put-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    id: 1
                    username: taro
                    display_name: 太郎
                    profile_image: 'http://example.com'
                    status: online
                    status_message: ほげほげ
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUser'
            examples:
              example:
                value:
                  name: putuser
  '/users/{userID}/friends':
    parameters:
      - name: userID
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get Friend List of Specified User
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseUser'
              examples:
                example:
                  value:
                    - id: 2
                      username: inu
                      display_name: 犬
                      profile_image: 'http://example.com'
                      status: online
                      status_message: I'm dog
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
                    - id: 3
                      username: saru
                      display_name: 猿
                      profile_image: 'http://example.com'
                      status: offline
                      status_message: I'm monkey
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
                    - id: 4
                      username: kiji
                      display_name: 雉
                      profile_image: 'http://example.com'
                      status: game
                      status_message: I'm pheasant
                      created_at: '2019-08-24T14:15:22Z'
                      updated_at: '2019-08-24T14:15:22Z'
      operationId: get-users-userId-friends
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
components:
  schemas:
    RequestUser:
      title: RequestUser
      type: object
      x-examples:
        example:
          username: bunjiro
          display_name: 文次郎
          status_message: Don't Panic!
      properties:
        username:
          type: string
          minLength: 1
        display_name:
          type: string
        profile_image:
          type: string
          format: binary
        status_message:
          type: string
    ResponseUser:
      title: ResponseUser
      type: object
      x-examples:
        example:
          id: 42
          username: nop
          display_name: のっぷ
          profile_image: 'localost:4211/users/nop/profile.jpg'
          status: online
          status_message: May the force be with you.
          created_at: '2021-01-01T12:42:42Z'
          updated_at: '2042-01-01T12:42:42Z'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          minimum: 1
        username:
          type: string
          minLength: 1
        display_name:
          type: string
        profile_image:
          type: string
          format: uri
        status:
          type: string
          enum:
            - online
            - offline
            - game
        status_message:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - username
        - display_name
        - profile_image
        - status
        - status_message
        - created_at
        - updated_at
  requestBodies: {}
  responses: {}
  parameters:
    userId:
      name: userID
      in: path
      required: true
      schema:
        type: integer
    username:
      name: username
      in: path
      schema:
        type: string
      description: Username
      required: true
    limit:
      name: limit
      in: query
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 80
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
  examples: {}
